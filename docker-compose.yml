services:
  # PostgreSQL database
  db:
    image: postgres:15
    container_name: magasincentral-api-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentraldb
    volumes:
      - db_data:/var/lib/postgresql/data

  app:
    build:
      context: .
      dockerfile: MagasinCentral/Dockerfile
    image: magasincentral-api:latest
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__DefaultConnection: "Host=db;Port=5432;Database=magasincentraldb;Username=magasinuser;Password=magasinpass"
    depends_on:
      - db
    
  produit-db:
    image: postgres:15
    container_name: magasincentral-produitservice-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-produit-db
    volumes:
      - produit_data:/var/lib/postgresql/data

  produitmc:
    build:
      context: .
      dockerfile: ProduitMcService/Dockerfile
    image: produitmc-api:latest
    ports:
      - "7198:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - produit-db

  client-db:
    image: postgres:15
    container_name: magasincentral-clientservice-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-client-db
    volumes:
      - client_data:/var/lib/postgresql/data

  clientmc:
    build:
      context: .
      dockerfile: ClientMcService/Dockerfile
    image: clientmc-api:latest
    ports:
      - "7041:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - client-db

  commandemc:
    build:
      context: .
      dockerfile: CommandeMcService/Dockerfile
    image: commandemc-api:latest
    ports:
      - "7154:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"

  magasin-db:
    image: postgres:15
    container_name: magasincentral-magasindb
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-magasin-db
    volumes:
      - magasin_data:/var/lib/postgresql/data
  
  magasinmc:
    build:
      context: .
      dockerfile: MagasinMcService/Dockerfile
    image: magasinmc-api:latest
    ports:
      - "7013:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - magasin-db

  panier-db:
    image: postgres:15
    container_name: magasincentral-panier-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-panier-db
    volumes:
      - panier_data:/var/lib/postgresql/data
  
  paniermc:
    build:
      context: .
      dockerfile: PanierMcService/Dockerfile
    image: paniermc-api:latest
    ports:
      - "7019:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - panier-db

  rapportmc:
    build:
      context: .
      dockerfile: RapportMcService/Dockerfile
    image: rapportmc-api:latest
    ports:
      - "7214:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"

  stock-db:
    image: postgres:15
    container_name: magasincentral-stock-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-stock-db
    volumes:
      - stock_data:/var/lib/postgresql/data

  stockmc:
    build:
      context: .
      dockerfile: StockMcService/Dockerfile
    image: stockmc-api:latest
    ports:
      - "7185:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - stock-db

  vente-db:
    image: postgres:15
    container_name: magasincentral-vente-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-vente-db
    volumes:
      - vente_data:/var/lib/postgresql/data

  ventemc:
    build:
      context: .
      dockerfile: VenteMcService/Dockerfile
    image: ventemc-api:latest
    ports:
      - "7184:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - vente-db

  performances-db:
    image: postgres:15
    container_name: magasincentral-performances-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: magasinuser
      POSTGRES_PASSWORD: magasinpass
      POSTGRES_DB: magasincentral-performances-db
    volumes:
      - performances_data:/var/lib/postgresql/data

  performancesmc:
    build:
      context: .
      dockerfile: PerformancesMcService/Dockerfile
    image: performancesmc-api:latest
    ports:
      - "7044:80"
    environment:
      ASPNETCORE_URLS: "http://+:80"
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - performances-db

  nginx:
    image: nginx:stable
    container_name: magasincentral-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app

    # Prometheus pour les m√©triques
  prometheus:
    image: prom/prometheus:latest
    container_name: magasincentral-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: magasincentral-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

  node-exporter:
    image: prom/node-exporter:latest
    container_name: magasincentral-node-exporter
    restart: unless-stopped
    # expose le port 9100 en interne
    ports:
      - "9100:9100"

volumes:
  db_data:
  grafana_data:
  prometheus_data:
  produit_data:
  client_data:
  magasin_data:
  panier_data:
  stock_data:
  vente_data:
  performances_data: